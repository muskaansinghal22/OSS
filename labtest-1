import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt

def generate_traffic_data(duration_minutes, max_vehicles, noise_level):
    traffic_data = np.random.randint(0, max_vehicles, size=duration_minutes)
    noise = np.random.normal(0, noise_level, duration_minutes)
    noisy_data = traffic_data + noise
    return noisy_data

def smooth_data(noisy_data, cutoff_frequency, sample_rate):
    nyquist_rate = 0.5 * sample_rate
    normal_cutoff = cutoff_frequency / nyquist_rate
    b, a = butter(1, normal_cutoff, btype='low', analog=False)
    smoothed_data = filtfilt(b, a, noisy_data)
    return smoothed_data

def calculate_hourly_average(smoothed_data):
    hourly_avg = np.mean(smoothed_data.reshape(-1, 60), axis=1)
    return hourly_avg

def identify_high_traffic_intervals(smoothed_data, threshold, duration):
    high_traffic_intervals = []
    count = 0
    for i in range(len(smoothed_data)):
        if smoothed_data[i] > threshold:
            count += 1
        else:
            count = 0
        if count >= duration:
            high_traffic_intervals.append(i)
    return list(set(high_traffic_intervals))  # Unique intervals

def plot_traffic_data(noisy_data, smoothed_data, hourly_avg, high_traffic_intervals):
    plt.figure(figsize=(12, 8))

    # Noisy Traffic Data
    plt.subplot(3, 1, 1)
    plt.plot(noisy_data, label="Noisy Traffic Data")
    plt.title("Noisy Traffic Data")
    plt.xlabel("Time (minutes)")
    plt.ylabel("Vehicles")
    plt.legend()

    # Smoothed Traffic Data
    plt.subplot(3, 1, 2)
    plt.plot(smoothed_data, label="Smoothed Traffic Data", color='orange')
    plt.title("Smoothed Traffic Data")
    plt.xlabel("Time (minutes)")
    plt.ylabel("Vehicles")
    plt.legend()
    plt.subplot(3, 1, 3)
    plt.plot(hourly_avg, label="Hourly Average", color='green', marker='o')
    plt.title("Hourly Average Traffic Flow")
    plt.xlabel("Time (hours)")
    plt.ylabel("Average Vehicles")
    plt.legend()

    # Highlight High Traffic Periods
    for interval in high_traffic_intervals:
        plt.axvline(x=interval, color='red', linestyle='--', label='High Traffic Period')

    plt.tight_layout()
    plt.show()

def monitor_traffic_flow():
    duration_minutes = int(input("Enter the duration in minutes (e.g., 1440 for 24 hours): "))
    max_vehicles = int(input("Enter the maximum number of vehicles per minute: "))
    noise_level = float(input("Enter the noise level (standard deviation for sensor noise): "))
    cutoff_frequency = float(input("Enter the cutoff frequency for the low-pass filter: "))
    sample_rate = int(input("Enter the sample rate in Hz (e.g., 1 for minute-wise data): "))
    traffic_threshold = int(input("Enter the vehicle threshold for high traffic: "))
    duration = int(input("Enter the minimum duration in minutes for high traffic: "))
    
    noisy_data = generate_traffic_data(duration_minutes, max_vehicles, noise_level)
    smoothed_data = smooth_data(noisy_data, cutoff_frequency, sample_rate)
    hourly_avg = calculate_hourly_average(smoothed_data)
    high_traffic_intervals = identify_high_traffic_intervals(smoothed_data, traffic_threshold, duration)

    plot_traffic_data(noisy_data, smoothed_data, hourly_avg, high_traffic_intervals)

monitor_traffic_flow()
