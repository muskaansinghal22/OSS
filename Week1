Q2
#include <stdio.h>
#define MAX_SIZE 100
int main() {
    int arr[MAX_SIZE];
    int n, i;
    double sum = 0.0, average;
    printf("Enter the number of elements (max %d): ", MAX_SIZE);
    scanf("%d", &n);
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        sum += arr[i];
    }
    average = sum / n;
    printf("Sum= %.2f\n", sum);
    printf("Average = %.2f\n", average);
    return 0;
}


Q3
#include <stdio.h>
#include <string.h>
#define MAX_LENGTH 100
int main() {
    char str[MAX_LENGTH];
    char reversed[MAX_LENGTH];
    int length, i;
    printf("Enter a string: ");
    fgets(str, sizeof(str), stdin);
    if (str[strlen(str) - 1] == '\n') {
        str[strlen(str) - 1] = '\0';
    }
    length = strlen(str);
    for (i = 0; i < length; i++) {
        reversed[i] = str[length - 1 - i];
    }
    reversed[length] = '\0';
    printf("Reversed string: %s\n", reversed);
    return 0;
}


Q4
https://github.com/WebDevVikramChoudhary/small_projects_for_beginners_using_Html-Css-Js/tree/master/color%20genreter

//Reverse Engineering of a color generator open source project from github

Selecting Elements:

The main_div variable stores the reference to the div element with the ID colordiv.
The btn variable stores the reference to the button element with the ID btn.
Event Listener:

An event listener is added to the btn element that triggers a function when the button is clicked.
Generating a Single Hex Digit:

A function is defined that generates a random number between 0 and 15, converts it to a hexadecimal string, and returns it. This creates a single digit for the hex color code.
Generating a Full Hex Color Code:

Another function is defined that generates a full six-digit hex color code:
An array of six elements is created.
Each element in the array is replaced by a random hex digit generated by the previous function.
The array elements are concatenated into a single string with a # at the beginning to form a valid hex color code.
Changing the Background Color:

The background color of the main_div element is set to the generated hex color code.
In summary, the code sets up an event listener on a button that, when clicked, generates a random hex color code and applies it as the background color of a specified div element.


Q5
https://github.com/BradStevenson/Simple-C-Calculator/blob/master/Calculator.c

//Analysis

Variable Declarations:

float valueOne and float valueTwo: These variables store the two numbers to be operated on.
char operator: This variable stores the operator entered by the user (e.g., +, -, *, /, ^, or space for square root).
float answer: This variable stores the result of the operation.
User Input:

The program prompts the user to enter a calculation.
scanf is used to read the input from the user, which includes two float values and an operator.
Switch Statement:

The program uses a switch statement to determine the operation based on the entered operator.
Case '/': Divides valueOne by valueTwo and stores the result in answer.
Case '*': Multiplies valueOne by valueTwo and stores the result in answer.
Case '+': Adds valueOne and valueTwo and stores the result in answer.
Case '-': Subtracts valueTwo from valueOne and stores the result in answer.
Case '^': Raises valueOne to the power of valueTwo using the pow function and stores the result in answer.
Case ' ': Computes the square root of valueTwo using the sqrt function and stores the result in answer.
Default Case: If an invalid operator is entered, the program jumps to the fail label.
Output:

If a valid operation is performed, the result is printed in a formatted string showing the operation and the result.
If an invalid operator is entered, the program prints "Fail."
Goto Statements:

The goto fail statement redirects the flow to the fail label if an invalid operator is encountered.
The goto exit statement is used for clean termination of the program after printing the result.
Fail Label:

This label handles invalid input by printing "Fail."
Exit Label:

This label marks the end of the program and returns 0 to indicate successful execution.
In summary, the program takes two float values and an operator as input, performs the corresponding arithmetic operation, and prints the result. If an invalid operator is provided, it prints an error message and exits.






