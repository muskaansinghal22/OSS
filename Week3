Q1

fruits = ["Apple", "Banana", "Orange", "Grapes", "Mango"]
first_fruit = fruits[0]
print(f"First fruit: {first_fruit}")
last_fruit = fruits[-1]
print(f"Last fruit: {last_fruit}")
middle_fruits = fruits[1:4]
print(f"Middle fruits: {middle_fruits}")


Q2

students_ages = {
    "Alice": 21,
    "Bob": 22,
    "Charlie": 20,
    "David": 23,
    "Eve": 19
}
specific_student = "Charlie"
age_of_specific_student = students_ages[specific_student]
print(f"Age of {specific_student}: {age_of_specific_student}")
new_student_name = "Frank"
new_student_age = 24
students_ages[new_student_name] = new_student_age
print(f"Updated dictionary: {students_ages}")



Q3

def duplicate(nums):
    seen = set()
    duplicates = set()
    for num in nums:
        if num in seen:
            duplicates.add(num)
        else:
            seen.add(num)
    return list(duplicates)
numbers = [1, 3, 5, 7, 3, 9, 1, 2, 8, 5]
print("Duplicates in the list:", duplicate(numbers))


Q4

def group(lst, size):
    grouped_lists = []
    for i in range(0, len(lst), size):
        grouped_lists.append(lst[i:i+size])
    return grouped_lists
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
group_size = 3
print("Grouped lists:", group(my_list, group_size))



Q5

import os

def extsort(files):
    return sorted(files, key=lambda f: os.path.splitext(f)[1])
    
def lensort(strings):
    return sorted(strings, key=len)
    
strings_list = ["apple", "kiwi", "banana", "cherry", "grape"]
print("Sorted by length:", lensort(strings_list))

files_list = ["file1.txt", "file2.jpg", "file3.txt", "file4.png", "file5.jpg"]
print("Sorted by extension:", extsort(files_list))


Q6

import os

def file_operations():
    try:
        # Writing to 'example.txt'
        with open('example.txt', 'w') as file:
            file.write("Hello, world!\n")
            file.write("This is a second line.\n")
        
        # Reading from 'example.txt'
        with open('example.txt', 'r') as file:
            content = file.read()
        print("File content read with read():")
        print(content)
        
        # Reading the file line by line using readline()
        with open('example.txt', 'r') as file:
            print("File content read line by line with readline():")
            line = file.readline()
            while line:
                print(line.strip())
                line = file.readline()
        
        # Writing multiple lines to 'example_lines.txt'
        lines = [
            "First line of text.\n",
            "Second line of text.\n",
            "Third line of text.\n"
        ]
        
        with open('example_lines.txt', 'w') as file:
            file.writelines(lines)
        
        # Reading from 'example_lines.txt'
        with open('example_lines.txt', 'r') as file:
            new_file_content = file.read()
        print("New file content read with read():")
        print(new_file_content)
    
    except PermissionError as e:
        print(f"PermissionError: {e}")
        print("Make sure you have the right permissions to access the files.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

file_operations()


Q7

def count_file_content(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        num_lines = len(lines)
        num_words = 0
        num_chars = 0

        for line in lines:
            num_chars += len(line)
            num_words += len(line.split())

        print(f"Number of lines: {num_lines}")
        print(f"Number of words: {num_words}")
        print(f"Number of characters (including spaces and newlines): {num_chars}")

    except FileNotFoundError:
        print(f"The file {file_path} was not found.")
    except PermissionError:
        print(f"Permission denied: Unable to access the file {file_path}.")
    except Exception as e:
        print(f"An error occurred: {e}")
count_file_content('example.txt')


Q8

def print_lines_in_reverse(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
        for line in reversed(lines):
            print(line.strip())

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except PermissionError:
        print(f"Error: Permission denied for file '{file_path}'.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    file_path = input("Enter the path to the file: ")
    print_lines_in_reverse(file_path)


Q9

def print_each_line_in_reverse(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
        for line in lines:
            reversed_line = line.strip()[::-1]
            print(reversed_line)

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except PermissionError:
        print(f"Error: Permission denied for file '{file_path}'.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    file_path = input("Enter the path to the file: ")
    print_each_line_in_reverse(file_path)


Q10

import textwrap
import sys

def wrap_lines_in_file(file_path, width):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        wrapped_lines = []
        for line in lines:
            wrapped_lines.extend(textwrap.wrap(line, width=width))
        for wrapped_line in wrapped_lines:
            print(wrapped_line)

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except PermissionError:
        print(f"Error: Permission denied for file '{file_path}'.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python wrap.py <filename> <width>")
    else:
        file_path = sys.argv[1]
        try:
            width = int(sys.argv[2])
            wrap_lines_in_file(file_path, width)
        except ValueError:
            print("Error: Width must be an integer.")


Q11

def custom_map(func, iterable):
    return [func(x) for x in iterable]
numbers = [1, 2, 3, 4, 5]
squared_numbers = custom_map(lambda x: x ** 2, numbers)
print(squared_numbers) 


Q12

def custom_filter(func, iterable):
    return [item for item in iterable if func(item)]
numbers = [1, 2, 3, 4, 5, 6]
even_numbers = custom_filter(lambda x: x % 2 == 0, numbers)
print(even_numbers)


Q13

def triplet(n):
    result = []
    for a in range(1, n):
        for b in range(a, n):
            c = a + b
            if c < n:
                result.append((a, b, c))
    return result
n = 10
print(triplet(n))


Q14

import csv

def parse_csv(file_path):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        return [row for row in reader]

csv_content = parse_csv('example.csv')
print(csv_content)

def mutate(word):
    mutations = set()
    alphabet = 'abcdefghijklmnopqrstuvwxyz'

    for i in range(len(word) + 1):
        for char in alphabet:
            new_word = word[:i] + char + word[i:]
            mutations.add(new_word)

    for i in range(len(word)):
        new_word = word[:i] + word[i+1:]
        mutations.add(new_word)

    for i in range(len(word)):
        for char in alphabet:
            if word[i] != char:
                new_word = word[:i] + char + word[i+1:]
                mutations.add(new_word)

    for i in range(len(word) - 1):
        new_word = word[:i] + word[i+1] + word[i] + word[i+2:]
        mutations.add(new_word)

    return list(mutations)

word = "cat"
print(mutate(word))


Q15

def mutate(word):
    mutations = set()
    alphabet = 'abcdefghijklmnopqrstuvwxyz'

    for i in range(len(word) + 1):
        for char in alphabet:
            new_word = word[:i] + char + word[i:]
            mutations.add(new_word)

    for i in range(len(word)):
        new_word = word[:i] + word[i+1:]
        mutations.add(new_word)

    for i in range(len(word)):
        for char in alphabet:
            if word[i] != char:
                new_word = word[:i] + char + word[i+1:]
                mutations.add(new_word)

    for i in range(len(word) - 1):
        new_word = word[:i] + word[i+1] + word[i] + word[i+2:]
        mutations.add(new_word)

    return mutations

def nearly_equal(a, b):
    if a in mutate(b):
        return True
    return False

a = "cat"
b = "bat"
print(nearly_equal(a, b))

a = "cat"
b = "cater"
print(nearly_equal(a, b))


Q16

from collections import Counter

def count_character_frequency(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()
        frequency = Counter(content)
        
        return frequency

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except PermissionError:
        print(f"Error: Permission denied for file '{file_path}'.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

file_path = 'example.txt'
frequency = count_character_frequency(file_path)
print(frequency)

def guess_file_type(file_path):
    frequency = count_character_frequency(file_path)
    if not frequency:
        return "Unknown file type"

    python_keywords = {'def', 'import', 'class', '#'}
    c_keywords = {'#include', 'int', 'return', 'main', '{', '}', ';', '/*', '*/', '//'}

    with open(file_path, 'r') as file:
        content = file.read().lower()

    if any(keyword in content for keyword in python_keywords):
        return "Python Program File"

    if any(keyword in content for keyword in c_keywords):
        return "C Program File"

    return "Text File"

file_path = 'example.txt'
file_type = guess_file_type(file_path)
print(f"The file is likely a: {file_type}")


Q17

from collections import defaultdict

def find_anagrams(words):
    anagrams = defaultdict(list)

    for word in words:
        sorted_word = ''.join(sorted(word))
        anagrams[sorted_word].append(word)

    return [group for group in anagrams.values() if len(group) > 1]

words = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']
anagram_groups = find_anagrams(words)
print(anagram_groups)















